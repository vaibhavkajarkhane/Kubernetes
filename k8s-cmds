Certified Kubernetes Administrator (CKA) - V1.27
The objective of this repository is help you for taking the Certified Kubernetes Administrator (CKA) exam using online resources, especially using resources from Kubernetes Official Documentation.

The references were selected for the Exam Curriculum 1.27, and there are exclusive information for API objects and annotations. For more information, please see CNCF Curriculum.

Please, feel free to place a pull request whether something is not up-to-date, should be added or contains wrong information/reference.

There are other Kubernetes certification exam preparation guides available:

Certified Kubernetes Security Specialist (CKS) - Preparation Guide
Exam
The exam is kind of "put your hands on", where you have some problems to fix within 120 minutes.

My tip: Spend your time wisely. Use the Notebook feature (provided in exam's UI) to keep track of your progress, where you might take notes of each question, put some annotations in order to help you. Additionally, don't get stuck, move to the next problem, and take it back when you finish all the other problems.

Exam Cost: $395 and includes one free retake.

It's important to mention that you have access to Kubernetes Official Documentation during the exam. So get yourself familiar with Kubernetes online documentation, and know where to find all specific topics listed below. It might be helpful for you during the exam.

For information about the exam, please refer Certified Kubernetes Administrator (CKA) Program.

CKA Curriculum
Exam objectives that outline of the knowledge, skills and abilities that a Certified Kubernetes Administrator (CKA) can be expected to demonstrate.

Cluster Architecture, Installation & Configuration (25%)
Manage role based access control (RBAC).

Kubernetes Documentation > Reference > Accessing the API > Using RBAC Authorization
Use Kubeadm to install a basic cluster.

Kubernetes Documentation > Getting started > Production environment > Installing Kubernetes with deployment tools > Bootstrapping clusters with kubeadm > Creating a cluster with kubeadm
Manage a highly-available Kubernetes cluster.

Kubernetes Documentation > Getting started > Production environment > Installing Kubernetes with deployment tools > Bootstrapping clusters with kubeadm > Creating Highly Available clusters with kubeadm
Provision underlying infrastructure to deploy a Kubernetes cluster.

Kubernetes Documentation > Getting started
Perform a version upgrade on a Kubernetes cluster using Kubeadm.

Kubernetes Documentation > Tasks > Administer a Cluster > Administration with kubeadm > Upgrading kubeadm clusters
Implement etcd backup and restore.

Kubernetes Documentation > Tasks > Administer a Cluster > Operating etcd clusters for Kubernetes
Helpful commands:

# Display addresses of the master and services
kubectl cluster-info

# Dump current cluster state to stdout
kubectl cluster-info dump

# List the nodes
kubectl get nodes

# Show metrics for a given node
kubectl top node my-node

# List all pods in all namespaces, with more details
kubectl get pods -o wide --all-namespaces

# List all services in all namespaces, with more details
kubectl get svc  -o wide --all-namespaces
Workloads & Scheduling (15%)
Understand deployments and how to perform rolling update and rollbacks.

Kubernetes Documentation > Concepts > Workloads > Controllers > Deployments

Example Deployment File (dep-nginx.yaml) using NGINX

apiVersion: apps/v1
kind: Deployment
metadata:
    name: nginx-deployment
    labels:
        app: nginx
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:1.21.6
        ports:
        - containerPort: 80
# Create Deployment
kubectl create -f dep-nginx.yaml

# Get Deployments
kubectl get deployments

# Update Deployment
kubectl edit deployment.v1.apps/nginx-deployment

# See rollout status
kubectl rollout status deployment.v1.apps/nginx-deployment

# Describe Deployment
kubectl describe deployment

# Rolling back to a previous revision
kubectl rollout undo deployment.v1.apps/nginx-deployment
Use ConfigMaps and Secrets to configure applications.

Kubernetes Documentation > Concepts > Configuration > ConfigMaps

Kubernetes Documentation > Concepts > Configuration > Secrets

Know how to scale applications.

Kubernetes Documentation > Concepts > Cluster Administration > Managing Resources > Scaling Your Application.

# Increase replicas number for nginx-deployment
kubectl scale deployment/nginx-deployment --replicas=5

# Using autoscaling
kubectl autoscale deployment/nginx-deployment --min=2 --max=5
Understand the primitives used to create robust, self-healing, application deployments.

Kubernetes Documentation > Concepts > Workloads > Pods > Pod Lifecycle

Kubernetes Documentation > Tasks > Configure Pods and Containers > Configure Liveness, Readiness and Startup Probes

Understand how resource limits can affect Pod scheduling.

Kubernetes Documentation > Concepts > Configuration > Managing Resources for Containers
Awareness of manifest management and common templating tools.

Kubernetes Documentation > Concepts > Cluster Administration > Managing Resources

Kubernetes Documentation > Tasks > Manage Kubernetes Objects

Services & Networking (20%)
Understand host networking configuration on the cluster nodes.

Kubernetes Documentation > Concepts > Cluster Administration > Cluster Networking
Understand connectivity between Pods.

Kubernetes Documentation > Concepts > Workloads > Pods > Networking

GitHub > Kubernetes Community Documentation > Design Proposals > Networking

Understand ClusterIP, NodePort, LoadBalancer service types and endpoints.

Kubernetes Documentation > Concepts > Services, Load Balancing, and Networking > Service
Know how to use Ingress controllers and Ingress resources.

Kubernetes Documentation > Concepts > Services, Load Balancing, and Networking > Ingress
Kubernetes Documentation > Concepts > Services, Load Balancing, and Networking > Ingress Controllers
Know how to configure and use CoreDNS.

Kubernetes Documentation > Tasks > Administer a Cluster > Using CoreDNS for Service Discovery
Choose an appropriate container network interface plugin.

Kubernetes Documentation > Concepts > Extending Kubernetes > Compute, Storage, and Networking Extensions > Network Plugins
Storage (10%)
Understand storage classes, persistent volumes.

Kubernetes Documentation > Concepts > Storage > Storage Classes
Kubernetes Documentation > Concepts > Storage > Persistent Volumes
Understand volume mode, access modes and reclaim policies for volumes.

Kubernetes Documentation > Concepts > Storage > Persistent Volumes
Understand persistent volume claims primitive.

Kubernetes Documentation > Concepts > Storage > Persistent Volumes
Know how to configure applications with persistent storage.

Kubernetes Documentation > Tasks > Configure Pods and Containers > Configure a Pod to Use a PersistentVolume for Storage
Troubleshooting (30%)
Evaluate cluster and node logging.

Kubernetes Documentation > Tasks > Monitoring, Logging, and Debugging > Troubleshoot Clusters
Understand how to monitor applications.

Kubernetes Documentation > Tasks > Monitoring, Logging, and Debugging > Tools for Monitoring Resources
Manage container stdout & stderr logs.

Kubernetes Documentation > Concepts > Cluster Administration > Logging Architecture
Troubleshoot application failure.

Kubernetes Documentation > Tasks > Monitoring, Logging, and Debugging > Troubleshoot Applications
Kubernetes Documentation > Tasks > Monitoring, Logging, and Debugging > Application Introspection and Debugging
Troubleshoot cluster component failure.

Kubernetes Documentation > Tasks > Monitoring, Logging, and Debugging > Troubleshoot Clusters
Troubleshoot networking.

Kubernetes Documentation > Tasks > Monitoring, Logging, and Debugging > Debug Services
CKA Preparation Courses
Certified Kubernetes Administrator (CKA) - A Cloud Guru (formerly Linux Academy)

Kubernetes Fundamentals (LFS258) - Linux Foundation

Kubernetes Deep Dive - A Cloud Guru

kubectl Ninja
Tip: Use kubectl Cheatsheet during the exam. You don't need to decorate everything.

Useful commands or parameters during the exam:
# Use "kubectl describe" for related events and troubleshooting
kubectl describe pods <podid>

# Use "kubectl explain" to check the structure of a resource object.
kubectl explain deployment --recursive

## Add "-o wide" in order to use wide output, which gives you more details.
kubectl get pods -o wide

## Check always all namespaces by including "--all-namespaces"
kubectl get pods --all-namespaces
Generate a manifest template from imperative spec using the output option "-o yaml" and the parameter "--dry-run=client":

# create a service
kubectl create service clusterip my-service --tcp=8080 --dry-run=client -o yaml

# create a deployment
kubectl create deployment nginx --image=nginx --dry-run=client -o yaml

# create a pod
kubectl run nginx --image=nginx --restart=Never --dry-run=client -o yaml
Create resources using kubectl + stdin instead of creating them from manifest files. It helps a lot and saves time. You can use the output of the command above and modify as required:

cat <<EOF | kubectl create -f -
...
EOF
It saves lots of time, believe me.

Kubectl Autocomplete

source <(kubectl completion bash)
Practice
Practice a lot with Kubernetes:

Killer.sh - CKA Simulator
Kubernetes the Hard Way by Kelsey Hightower
CKA Tips
Some links that contain tips that might help you from different perspectives of the CKA exam.

How to pass the Certified Kubernetes Administrator (CKA) exam on the first attempt
